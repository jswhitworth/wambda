AWSTemplateFormatVersion: '2010-09-09'
Description: "Demo Platform by Jeff Whitworth"

Resources:
  # Create the IAM Role for Lambda
  WambdaLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: wambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Create the Lambda function
  wambdaDemoFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: wambdaDemoFunction
      Handler: index.handler
      Role: !GetAtt WambdaLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello, World!'
              }
      Runtime: python3.8
      Timeout: 15

  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: wambdaDemoApi
      EndpointConfiguration:
        Types: 
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: wambda
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${wambdaDemoFunction.Arn}/invocations

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod
    DependsOn: ApiGatewayMethod

  # Lambda Permission to API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref wambdaDemoFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/wambda

  # Custom Domain for API Gateway
  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: wwvv.texasonlinedrivingsafety.com
      EndpointConfiguration:
        Types: 
          - REGIONAL
      RegionalCertificateArn: arn:aws:acm:us-west-2:748157940656:certificate/5d9a0602-2e32-4ecd-8fda-df7199651ead

  # Base Path Mapping
  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref ApiGatewayRestApi
      Stage: prod

Outputs:
  ApiUrl:
    Description: "API Gateway URL"
    Value: 
      Fn::Sub: https://${ApiGatewayCustomDomain}/prod/wambda
